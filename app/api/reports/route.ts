import { NextRequest, NextResponse } from 'next/server'

// Real OpenAI API integration with GitHub Models for health reports
const GITHUB_TOKEN = process.env.GITHUB_TOKEN || 'your-github-token-here'
const API_URL = 'https://models.inference.ai.azure.com/chat/completions'

export async function POST(request: NextRequest) {
  try {
    const { reportType, context } = await request.json()
    
    if (!reportType) {
      return NextResponse.json({ error: 'Report type is required' }, { status: 400 })
    }

    // Prepare system prompt for health report generation
    const systemPrompt = `You are DoseBuddy AI, an advanced healthcare analytics assistant. Generate comprehensive health reports based on user medication data.

User Context:
- Language: ${context?.language || 'en'}
- Current medications: ${JSON.stringify(context?.doses || [])}
- Historical data: ${JSON.stringify(context?.history || [])}
- Member: ${context?.memberInfo || 'Unknown'}
- Report Type: ${reportType}

Available Report Types:
1. adherence-analysis: Medication adherence patterns and trends
2. health-insights: Overall health insights and recommendations
3. medication-effectiveness: Analysis of medication effectiveness
4. risk-assessment: Identify potential health risks
5. optimization-suggestions: Schedule and dosage optimization

Generate a detailed, professional health report with:
- Executive Summary
- Key Findings
- Trends Analysis
- Recommendations
- Action Items
- Risk Factors (if any)

Use real medical knowledge and provide actionable insights. Always include disclaimers about consulting healthcare professionals. Respond in ${context?.language === 'hi' ? 'Hindi' : 'English'}.`

    // Call real OpenAI API through GitHub Models
    const response = await fetch(API_URL, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${GITHUB_TOKEN}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o', // Using GPT-4 Omni model
        messages: [
          {
            role: 'system',
            content: systemPrompt
          },
          {
            role: 'user',
            content: `Generate a comprehensive ${reportType} report based on the provided medical data.`
          }
        ],
        max_tokens: 2000,
        temperature: 0.3, // Lower temperature for more consistent medical advice
        top_p: 0.9
      })
    })

    if (!response.ok) {
      console.error('OpenAI API error:', await response.text())
      throw new Error(`OpenAI API error: ${response.status}`)
    }

    const data = await response.json()
    const report = data.choices?.[0]?.message?.content || 'Unable to generate report at this time.'

    // Parse and structure the report
    const structuredReport = {
      reportType,
      generatedAt: new Date().toISOString(),
      summary: extractSection(report, 'Executive Summary'),
      findings: extractSection(report, 'Key Findings'),
      trends: extractSection(report, 'Trends Analysis'),
      recommendations: extractSection(report, 'Recommendations'),
      actionItems: extractSection(report, 'Action Items'),
      riskFactors: extractSection(report, 'Risk Factors'),
      fullReport: report,
      model: 'gpt-4o',
      disclaimer: context?.language === 'hi' 
        ? 'यह रिपोर्ट केवल सूचनात्मक उद्देश्यों के लिए AI द्वारा तैयार की गई है। किसी भी चिकित्सा निर्णय से पहले अपने डॉक्टर से सलाह लें।'
        : 'This report is generated by AI for informational purposes only. Always consult your healthcare provider before making any medical decisions.'
    }

    return NextResponse.json({ 
      success: true,
      report: structuredReport
    })

  } catch (error) {
    console.error('Reports API error:', error)
    
    // Fallback report for errors
    const fallbackReport = {
      reportType: 'general',
      generatedAt: new Date().toISOString(),
      summary: 'Report generation encountered an issue. Please try again later.',
      error: 'AI service temporarily unavailable',
      fallback: true
    }
    
    return NextResponse.json({ 
      success: false,
      report: fallbackReport,
      error: 'Failed to generate report'
    })
  }
}

// Helper function to extract sections from the report
function extractSection(report: string, sectionTitle: string): string {
  const lines = report.split('\n')
  let inSection = false
  let sectionContent = []
  
  for (const line of lines) {
    if (line.toLowerCase().includes(sectionTitle.toLowerCase())) {
      inSection = true
      continue
    }
    
    if (inSection) {
      if (line.trim() === '' || line.match(/^#+\s/)) {
        if (sectionContent.length > 0) break
      } else {
        sectionContent.push(line)
      }
    }
  }
  
  return sectionContent.join('\n').trim()
}
