"use client"

import { useState, useEffect, useCallback, useRef } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Separator } from '@/components/ui/separator'
import { Progress } from '@/components/ui/progress'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Input } from '@/components/ui/input'
import { ScrollArea } from '@/components/ui/scroll-area'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { 
  Bell, 
  Pill, 
  Clock, 
  Activity, 
  AlertTriangle, 
  CheckCircle, 
  XCircle,
  Wifi,
  WifiOff,
  Users,
  Calendar,
  TrendingUp,
  Plus,
  Settings,
  Home,
  FileText,
  Brain,
  BarChart3,
  Smartphone,
  Languages,
  Edit,
  Trash2,
  Send,
  Bot,
  User,
  Heart,
  Shield,
  Zap,
  Target,
  Volume2,
  VolumeX,
  Play,
  Pause,
  MessageCircle
} from 'lucide-react'
import { firebaseService, type Dose, type Notification, type PillDispenser } from '@/lib/firebase-service'
import EnhancedMedicationForm from '@/components/enhanced-medication-form'
import { useVoiceSynthesis } from '@/lib/voice-synthesis'

// Comprehensive translations object for English and Hindi
const translations = {
  en: {
    // App and Navigation
    appName: "DoseBuddy",
    tagline: "Smart Medication Management System",
    aiPowered: "AI-Powered Healthcare",
    dashboard: "Dashboard",
    medications: "Medications", 
    schedule: "Schedule",
    members: "Members",
    reports: "Reports",
    aiAssistant: "AI Assistant",
    notifications: "Notifications",
    settings: "Settings",
    
    // Language
    english: "English",
    hindi: "हिंदी",
    
    // Member Management
    goodMorning: "Good Morning",
    goodAfternoon: "Good Afternoon", 
    goodEvening: "Good Evening",
    memberYou: "You",
    familyMember1: "Family Member 1",
    familyMember2: "Family Member 2",
    addMember: "Add Member",
    medicationSchedule: "Here's your medication schedule for today",
    
    // AI Assistant
    aiHealthAssistant: "AI Health Assistant",
    aiDescription: "Real-time monitoring and smart recommendations",
    smartAnalysis: "Smart Analysis",
    smartAnalysisDesc: "AI monitoring your medication patterns",
    smartAlerts: "Smart Alerts", 
    smartAlertsDesc: "Personalized medication reminders",
    healthInsights: "Health Insights",
    healthInsightsDesc: "Track adherence and health trends",
    active: "Active",
    
    // Status Cards
    smartDispenser: "Smart Dispenser",
    online: "Online",
    offline: "Offline",
    unread: "unread",
    missedDoses: "Missed Doses",
    pending: "pending",
    adherence: "Adherence",
    
    // Medications
    todaysMedications: "Today's Medications",
    allMedications: "All Medications",
    addMedication: "Add Medication",
    addNew: "Add New", 
    editMedication: "Edit Medication",
    deleteMedication: "Delete Medication",
    noMedicationsToday: "No medications scheduled for today",
    scheduleTodayMedications: "Schedule Today's Medications",
    noMedicationsFound: "No medications found",
    addFirstMedication: "Add Your First Medication",
    total: "total",
    taken: "Taken",
    missed: "Missed",
    upcoming: "Upcoming",
    chamber: "Chamber",
    
    // AI and Chat
    getAIAdvice: "Get AI Advice",
    aiMedicationAdvice: "AI Medication Advice",
    aiRecommendation: "AI Recommendation",
    reasoning: "Reasoning",
    nextSteps: "Next Steps",
    importantWarnings: "Important Warnings",
    medicalDisclaimer: "Medical Disclaimer",
    disclaimerText: "This advice is generated by AI for informational purposes only. Always consult your healthcare provider before making any medication decisions.",
    close: "Close",
    contactHealthcare: "Contact Healthcare Provider",
    missedDosesAttention: "Missed Doses Requiring Attention",
    aiChatTitle: "Chat with AI Assistant",
    aiChatPlaceholder: "Ask me about your medications, side effects, or health concerns...",
    aiChatSend: "Send",
    aiAnalyzing: "AI is analyzing...",
    aiTyping: "AI is typing...",
    
    // Reports and Analytics
    medicineReport: "Medicine Report",
    viewFullReport: "View Full Report",
    adherenceRate: "Adherence Rate",
    onTimeRate: "On-Time Rate", 
    thisWeek: "This Week",
    improvement: "improvement",
    missedDosesReport: "Missed Doses",
    thisMonth: "this month",
    nextRefill: "Next Refill",
    inDays: "In 8 days",
    
    // Quick Actions
    quickAIActions: "Quick AI Actions", 
    analyzeHealthTrends: "Analyze My Health Trends",
    getMissedDoseAdvice: "Get Missed Dose Advice",
    optimizeSchedule: "Optimize Schedule",
    
    // Dispenser
    bedroomDispenser: "Bedroom Dispenser",
    pillsRemaining: "Pills Remaining",
    low: "Low",
    syncDispenser: "Sync Dispenser",
    dispenserDetails: "Smart Dispenser Details",
    connectionStatus: "Connection Status",
    connected: "Connected",
    disconnected: "Disconnected",
    lastDispense: "Last Dispense",
    successful: "Successful",
    failed: "Failed",
    lastSeen: "Last Seen"
  },
  hi: {
    // App and Navigation  
    appName: "डोज़बडी",
    tagline: "स्मार्ट दवा प्रबंधन प्रणाली",
    aiPowered: "AI-संचालित स्वास्थ्य सेवा",
    dashboard: "डैशबोर्ड",
    medications: "दवाएं",
    schedule: "समयसूची", 
    members: "सदस्य",
    reports: "रिपोर्ट",
    aiAssistant: "AI सहायक",
    notifications: "सूचनाएं",
    settings: "सेटिंग्स",
    
    // Language
    english: "English", 
    hindi: "हिंदी",
    
    // Member Management
    goodMorning: "सुप्रभात",
    goodAfternoon: "नमस्ते",
    goodEvening: "शुभ संध्या", 
    memberYou: "आप",
    familyMember1: "परिवारिक सदस्य 1",
    familyMember2: "परिवारिक सदस्य 2", 
    addMember: "सदस्य जोड़ें",
    medicationSchedule: "यहाँ आज के लिए आपकी दवा की समयसूची है",
    
    // AI Assistant
    aiHealthAssistant: "AI स्वास्थ्य सहायक",
    aiDescription: "वास्तविक समय निगरानी और स्मार्ट सुझाव",
    smartAnalysis: "स्मार्ट विश्लेषण",
    smartAnalysisDesc: "AI आपके दवा पैटर्न की निगरानी कर रहा है",
    smartAlerts: "स्मार्ट अलर्ट",
    smartAlertsDesc: "व्यक्तिगत दवा रिमाइंडर",
    healthInsights: "स्वास्थ्य अंतर्दृष्टि", 
    healthInsightsDesc: "पालन और स्वास्थ्य प्रवृत्तियों को ट्रैक करें",
    active: "सक्रिय",
    
    // Status Cards
    smartDispenser: "स्मार्ट डिस्पेंसर",
    online: "ऑनलाइन",
    offline: "ऑफलाइन", 
    unread: "अपठित",
    missedDoses: "छूटी हुई खुराक",
    pending: "लंबित",
    adherence: "पालन",
    
    // Medications
    todaysMedications: "आज की दवाएं",
    allMedications: "सभी दवाएं", 
    addMedication: "दवा जोड़ें",
    addNew: "नया जोड़ें",
    editMedication: "दवा संपादित करें",
    deleteMedication: "दवा हटाएं",
    noMedicationsToday: "आज के लिए कोई दवा निर्धारित नहीं है",
    scheduleTodayMedications: "आज की दवाओं का कार्यक्रम बनाएं",
    noMedicationsFound: "कोई दवा नहीं मिली",
    addFirstMedication: "अपनी पहली दवा जोड़ें",
    total: "कुल",
    taken: "ली गई",
    missed: "छूटी",
    upcoming: "आगामी", 
    chamber: "कक्ष",
    
    // AI and Chat
    getAIAdvice: "AI सलाह प्राप्त करें",
    aiMedicationAdvice: "AI दवा सलाह",
    aiRecommendation: "AI सिफारिश",
    reasoning: "तर्क",
    nextSteps: "अगले कदम",
    importantWarnings: "महत्वपूर्ण चेतावनी",
    medicalDisclaimer: "चिकित्सा अस्वीकरण",
    disclaimerText: "यह सलाह केवल सूचनात्मक उद्देश्यों के लिए AI द्वारा उत्पन्न की गई है। कोई भी दवा निर्णय लेने से पहले हमेशा अपने स्वास्थ्य सेवा प्रदाता से सलाह लें।",
    close: "बंद करें",
    contactHealthcare: "स्वास्थ्य सेवा प्रदाता से संपर्क करें",
    missedDosesAttention: "ध्यान देने वाली छूटी हुई खुराक",
    aiChatTitle: "AI सहायक के साथ चैट करें",
    aiChatPlaceholder: "अपनी दवाओं, साइड इफेक्ट्स या स्वास्थ्य चिंताओं के बारे में पूछें...",
    aiChatSend: "भेजें",
    aiAnalyzing: "AI विश्लेषण कर रहा है...",
    aiTyping: "AI टाइप कर रहा है...",
    
    // Reports and Analytics
    medicineReport: "दवा रिपोर्ट",
    viewFullReport: "पूर्ण रिपोर्ट देखें",
    adherenceRate: "पालन दर",
    onTimeRate: "समय पर दर",
    thisWeek: "इस सप्ताह",
    improvement: "सुधार",
    missedDosesReport: "छूटी हुई खुराक",
    thisMonth: "इस महीने",
    nextRefill: "अगली रिफिल",
    inDays: "8 दिनों में",
    
    // Quick Actions
    quickAIActions: "त्वरित AI क्रियाएं",
    analyzeHealthTrends: "मेरे स्वास्थ्य रुझानों का विश्लेषण करें",
    getMissedDoseAdvice: "छूटी हुई खुराक की सलाह लें",
    optimizeSchedule: "कार्यक्रम अनुकूलित करें",
    
    // Dispenser
    bedroomDispenser: "बेडरूम डिस्पेंसर",
    pillsRemaining: "शेष गोलियां",
    low: "कम",
    syncDispenser: "डिस्पेंसर सिंक करें",
    dispenserDetails: "स्मार्ट डिस्पेंसर विवरण",
    connectionStatus: "कनेक्शन स्थिति",
    connected: "जुड़ा हुआ",
    disconnected: "डिस्कनेक्टेड",
    lastDispense: "अंतिम वितरण",
    successful: "सफल",
    failed: "असफल",
    lastSeen: "अंतिम बार देखा गया"
  }
}

interface MissedDoseAdvice {
  recommendation: 'take_now' | 'take_with_adjustment' | 'skip_dose' | 'contact_healthcare'
  reasoning: string
  urgency: 'low' | 'medium' | 'high' | 'critical'
  nextSteps: string[]
  warnings?: string[]
  timeSensitive: boolean
}

interface DashboardNotification extends Notification {
  id: string
}

interface DashboardData {
  doses: Record<string, Dose>
  notifications: DashboardNotification[]
  dispenserStatus: PillDispenser | null
  unreadCount: number
}

export default function PillDoseBuddyDashboard() {
  const [dashboardData, setDashboardData] = useState<DashboardData>({
    doses: {},
    notifications: [],
    dispenserStatus: null,
    unreadCount: 0
  })
  const [loading, setLoading] = useState(true)
  const [selectedDose, setSelectedDose] = useState<string | null>(null)
  const [advice, setAdvice] = useState<MissedDoseAdvice | null>(null)
  const [loadingAdvice, setLoadingAdvice] = useState(false)
  const [showMedicationForm, setShowMedicationForm] = useState(false)
  const [editingMedication, setEditingMedication] = useState<any>(null)
  const [selectedMember, setSelectedMember] = useState('sung')
  const [currentLanguage, setCurrentLanguage] = useState<'en' | 'hi'>('en')
  const [activeTab, setActiveTab] = useState('dashboard')
  const [aiChatMessages, setAiChatMessages] = useState<{role: 'user' | 'ai', message: string, timestamp: Date}[]>([])
  const [aiChatInput, setAiChatInput] = useState('')
  const [aiChatLoading, setAiChatLoading] = useState(false)
  const [voiceEnabled, setVoiceEnabled] = useState(true)
  
  // Voice synthesis hook
  const { speak, stop, isSpeaking, isSupported } = useVoiceSynthesis()
  const chatMessagesEndRef = useRef<HTMLDivElement>(null)

  // Translation helper function
  const t = (key: string) => translations[currentLanguage][key as keyof typeof translations['en']] || key

  // Auto-scroll chat to bottom
  useEffect(() => {
    if (chatMessagesEndRef.current) {
      chatMessagesEndRef.current.scrollIntoView({ behavior: 'smooth' })
    }
  }, [aiChatMessages])

  // Get current time greeting
  const getGreeting = () => {
    const hour = new Date().getHours()
    if (hour < 12) return t('goodMorning')
    if (hour < 17) return t('goodAfternoon')
    return t('goodEvening')
  }

  // Enhanced edit and delete functions with real Firebase integration
  const handleEditMedication = useCallback((medication: any) => {
    setEditingMedication(medication)
    setShowMedicationForm(true)
  }, [])

  const handleDeleteMedication = useCallback(async (medicationId: string) => {
    const confirmMessage = currentLanguage === 'hi' 
      ? 'क्या आप वाकई इस दवा को हटाना चाहते हैं?' 
      : 'Are you sure you want to delete this medication?'
    
    if (window.confirm(confirmMessage)) {
      try {
        // Delete from Firebase
        await firebaseService.deleteDose(medicationId)
        
        // Update local state immediately
        setDashboardData(prev => {
          const newDoses = { ...prev.doses }
          delete newDoses[medicationId]
          return { ...prev, doses: newDoses }
        })
        
        const successMessage = currentLanguage === 'hi' 
          ? 'दवा सफलतापूर्वक हटा दी गई!' 
          : 'Medication deleted successfully!'
        alert(successMessage)
      } catch (error) {
        console.error('Error deleting medication:', error)
        const errorMessage = currentLanguage === 'hi' 
          ? 'दवा हटाने में त्रुटि। कृपया पुनः प्रयास करें।' 
          : 'Failed to delete medication. Please try again.'
        alert(errorMessage)
      }
    }
  }, [currentLanguage])

  // Enhanced AI Chat with voice response
  const handleAiChat = async () => {
    if (!aiChatInput.trim()) return
    
    const userMessage = aiChatInput
    setAiChatInput('')
    setAiChatMessages(prev => [...prev, { role: 'user', message: userMessage, timestamp: new Date() }])
    setAiChatLoading(true)

    try {
      // Call our enhanced chat API
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          message: userMessage,
          context: {
            language: currentLanguage,
            doses: Object.values(dashboardData.doses),
            notifications: dashboardData.notifications,
            memberInfo: selectedMember
          }
        }),
      })
      
      if (!response.ok) {
        throw new Error('AI service unavailable')
      }
      
      const data = await response.json()
      const aiResponse = data.response || (currentLanguage === 'hi' 
        ? 'मुझे खुशी है कि आपने सवाल पूछा। मैं आपकी दवा प्रबंधन में सहायता करने के लिए यहाँ हूँ।'
        : 'I\'m here to help with your medication management. How can I assist you today?')
      
      setAiChatMessages(prev => [...prev, { role: 'ai', message: aiResponse, timestamp: new Date() }])
      
      // Speak the AI response if voice is enabled
      if (voiceEnabled && isSupported && aiResponse) {
        try {
          await speak(aiResponse, currentLanguage)
        } catch (voiceError) {
          console.warn('Voice synthesis failed:', voiceError)
        }
      }
      
    } catch (error) {
      console.error('AI Chat error:', error)
      const errorMessage = currentLanguage === 'hi' 
        ? 'क्षमा करें, मुझे एक त्रुटि आई है। कृपया पुनः प्रयास करें।' 
        : 'Sorry, I encountered an error. Please try again.'
      
      setAiChatMessages(prev => [...prev, { 
        role: 'ai', 
        message: errorMessage,
        timestamp: new Date()
      }])
    } finally {
      setAiChatLoading(false)
    }
  }

  // Initialize Firebase and set up real-time listeners
  useEffect(() => {
    let unsubscribeFunctions: (() => void)[] = []

    const initializeApp = async () => {
      try {
        await firebaseService.initialize()
        
        const updateAllMedications = async () => {
          try {
            const allMedications = await firebaseService.getAllUserMedications()
            setDashboardData(prev => ({ ...prev, doses: allMedications }))
          } catch (error) {
            console.error('Error fetching medications:', error)
          }
        }

        const unsubscribeDoses = firebaseService.onUserDosesChange(async (doses) => {
          await updateAllMedications()
        })

        const unsubscribeGlobalMedications = firebaseService.onGlobalMedicationsChange(async (medications) => {
          await updateAllMedications()
        })
        
        await updateAllMedications()
        
        const unsubscribeNotifications = firebaseService.onUserNotificationsChange((notifications) => {
          const notificationArray = Object.entries(notifications || {})
            .map(([id, notification]) => ({ id, ...notification }))
            .sort((a, b) => b.timestamp - a.timestamp)
          
          const unreadCount = notificationArray.filter(n => !n.read).length
          
          setDashboardData(prev => ({ 
            ...prev, 
            notifications: notificationArray,
            unreadCount 
          }))
        })
        
        const unsubscribeDispenser = firebaseService.onPillDispenserStatusChange((dispenserStatus) => {
          setDashboardData(prev => ({ ...prev, dispenserStatus }))
        })
        
        unsubscribeFunctions = [unsubscribeDoses, unsubscribeGlobalMedications, unsubscribeNotifications, unsubscribeDispenser]
        setLoading(false)
        
      } catch (error) {
        console.error('Error initializing app:', error)
        setLoading(false)
      }
    }

    initializeApp()

    return () => {
      unsubscribeFunctions.forEach(unsubscribe => unsubscribe())
    }
  }, [])

  const handleGetAdvice = useCallback(async (doseId: string) => {
    setLoadingAdvice(true)
    setSelectedDose(doseId)
    
    try {
      const response = await fetch('/api/missed-dose-advisor', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ doseId }),
      })
      
      const data = await response.json()
      
      if (data.success) {
        setAdvice(data.advice)
      } else {
        console.error('Error getting advice:', data.error)
      }
    } catch (error) {
      console.error('Error fetching advice:', error)
    } finally {
      setLoadingAdvice(false)
    }
  }, [])

  const markNotificationAsRead = useCallback(async (notificationId: string) => {
    try {
      await fetch('/api/notifications', {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ notificationId, markAsRead: true }),
      })
    } catch (error) {
      console.error('Error marking notification as read:', error)
    }
  }, [])

  const handleMedicationFormSubmit = useCallback(() => {
    setShowMedicationForm(false)
    setEditingMedication(null)
  }, [])

  const handleMedicationFormCancel = useCallback(() => {
    setShowMedicationForm(false)
    setEditingMedication(null)
  }, [])

  // Show medication form if requested
  if (showMedicationForm) {
    return (
      <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
        <div className="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-auto">
          <EnhancedMedicationForm 
            medication={editingMedication}
            onSubmit={handleMedicationFormSubmit}
            onCancel={handleMedicationFormCancel}
          />
        </div>
      </div>
    )
  }

  const getConnectionStatus = () => {
    if (!dashboardData.dispenserStatus) return { status: 'unknown', color: 'gray' }
    
    const lastSeen = new Date(dashboardData.dispenserStatus.lastSeen)
    const now = new Date()
    const timeDiff = now.getTime() - lastSeen.getTime()
    const minutesAgo = Math.floor(timeDiff / (1000 * 60))
    
    if (minutesAgo <= 5) return { status: 'online', color: 'green' }
    if (minutesAgo <= 15) return { status: 'poor', color: 'yellow' }
    return { status: 'offline', color: 'red' }
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-cyan-100 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-4 border-blue-500 border-t-transparent mx-auto mb-4"></div>
          <div className="text-blue-600 text-xl font-semibold animate-pulse">
            {t('aiAnalyzing')}
          </div>
        </div>
      </div>
    )
  }

  const connectionStatus = getConnectionStatus()
  const upcomingDoses = Object.entries(dashboardData.doses)
    .filter(([_, dose]) => dose.status === 'upcoming')
    .slice(0, 5)
  
  const missedDoses = Object.entries(dashboardData.doses)
    .filter(([_, dose]) => dose.status === 'missed')
  
  const takenDoses = Object.entries(dashboardData.doses)
    .filter(([_, dose]) => dose.status === 'taken')

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-cyan-50">
      <div className="flex h-screen">
        {/* Vertical Sidebar Navigation */}
        <div className="w-64 bg-white shadow-xl border-r border-blue-100">
          {/* Header */}
          <div className="p-6 border-b border-blue-100">
            <div className="flex items-center gap-3 mb-4">
              <div className="bg-gradient-to-r from-blue-500 to-cyan-500 p-3 rounded-xl shadow-lg">
                <Pill className="h-8 w-8 text-white" />
              </div>
              <div>
                <h1 className="text-2xl font-bold text-gray-800">{t('appName')}</h1>
                <p className="text-sm text-blue-600">{t('tagline')}</p>
              </div>
            </div>
            
            {/* Language Selector */}
            <select 
              value={currentLanguage} 
              onChange={(e) => setCurrentLanguage(e.target.value as 'en' | 'hi')}
              className="w-full bg-blue-50 border border-blue-200 rounded-lg px-3 py-2 text-gray-700 focus:ring-2 focus:ring-blue-400 focus:border-transparent text-sm"
            >
              <option value="en">{t('english')}</option>
              <option value="hi">{t('hindi')}</option>
            </select>
          </div>

          {/* Member Selection */}
          <div className="p-4 border-b border-blue-100">
            <div className="flex items-center gap-3 mb-3">
              <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
                <Users className="h-5 w-5 text-blue-600" />
              </div>
              <div>
                <p className="font-semibold text-gray-800">{getGreeting()}, {selectedMember === 'sung' ? 'Sung' : selectedMember}</p>
                <p className="text-xs text-gray-500">{t('medicationSchedule')}</p>
              </div>
            </div>
            <select 
              value={selectedMember} 
              onChange={(e) => setSelectedMember(e.target.value)}
              className="w-full bg-gray-50 border border-gray-200 rounded-lg px-3 py-2 text-gray-700 text-sm"
            >
              <option value="sung">Sung ({t('memberYou')})</option>
              <option value="family1">{t('familyMember1')}</option>
              <option value="family2">{t('familyMember2')}</option>
            </select>
          </div>

          {/* Navigation Tabs */}
          <nav className="p-4 space-y-2">
            {[
              { id: 'dashboard', icon: Home, label: t('dashboard') },
              { id: 'medications', icon: Pill, label: t('medications') },
              { id: 'schedule', icon: Calendar, label: t('schedule') },
              { id: 'reports', icon: BarChart3, label: t('reports') },
              { id: 'ai-assistant', icon: Brain, label: t('aiAssistant') },
              { id: 'notifications', icon: Bell, label: t('notifications') },
              { id: 'members', icon: Users, label: t('members') },
              { id: 'settings', icon: Settings, label: t('settings') }
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`w-full flex items-center gap-3 px-4 py-3 rounded-lg transition-all ${
                  activeTab === tab.id
                    ? 'bg-blue-500 text-white shadow-lg'
                    : 'text-gray-600 hover:bg-blue-50'
                }`}
              >
                <tab.icon className="h-5 w-5" />
                <span className="font-medium">{tab.label}</span>
                {tab.id === 'notifications' && dashboardData.unreadCount > 0 && (
                  <Badge className="bg-red-500 text-white ml-auto">
                    {dashboardData.unreadCount}
                  </Badge>
                )}
              </button>
            ))}
          </nav>
        </div>

        {/* Main Content Area */}
        <div className="flex-1 overflow-auto">
          <div className="p-8">
            {/* Dashboard Tab */}
            {activeTab === 'dashboard' && (
              <div className="space-y-8">
                {/* Status Cards */}
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                  {/* Dispenser Status */}
                  <Card className={`bg-white border-2 ${
                    connectionStatus.status === 'online' 
                      ? 'border-green-200 shadow-green-100' 
                      : 'border-red-200 shadow-red-100'
                  } shadow-lg hover:shadow-xl transition-all`}>
                    <CardContent className="p-6">
                      <div className="flex items-center gap-3">
                        <div className={`p-3 rounded-xl ${
                          connectionStatus.status === 'online' 
                            ? 'bg-green-100' 
                            : 'bg-red-100'
                        }`}>
                          {connectionStatus.status === 'online' ? (
                            <Wifi className="h-6 w-6 text-green-600" />
                          ) : (
                            <WifiOff className="h-6 w-6 text-red-600" />
                          )}
                        </div>
                        <div>
                          <p className="font-semibold text-gray-800">{t('smartDispenser')}</p>
                          <p className={`text-sm font-medium capitalize ${
                            connectionStatus.status === 'online' ? 'text-green-600' : 'text-red-600'
                          }`}>
                            {t(connectionStatus.status)}
                          </p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  {/* Notifications */}
                  <Card className="bg-white border-2 border-blue-200 shadow-lg hover:shadow-xl transition-all">
                    <CardContent className="p-6">
                      <div className="flex items-center gap-3">
                        <div className="p-3 rounded-xl bg-blue-100">
                          <Bell className="h-6 w-6 text-blue-600" />
                        </div>
                        <div>
                          <p className="font-semibold text-gray-800">{t('notifications')}</p>
                          <p className="text-sm text-blue-600 font-medium">
                            {dashboardData.unreadCount} {t('unread')}
                          </p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  {/* Missed Doses */}
                  <Card className="bg-white border-2 border-orange-200 shadow-lg hover:shadow-xl transition-all">
                    <CardContent className="p-6">
                      <div className="flex items-center gap-3">
                        <div className="p-3 rounded-xl bg-orange-100">
                          <AlertTriangle className="h-6 w-6 text-orange-600" />
                        </div>
                        <div>
                          <p className="font-semibold text-gray-800">{t('missedDoses')}</p>
                          <p className="text-sm text-orange-600 font-medium">
                            {missedDoses.length} {t('pending')}
                          </p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  {/* Adherence Rate */}
                  <Card className="bg-white border-2 border-purple-200 shadow-lg hover:shadow-xl transition-all">
                    <CardContent className="p-6">
                      <div className="flex items-center gap-3">
                        <div className="p-3 rounded-xl bg-purple-100">
                          <TrendingUp className="h-6 w-6 text-purple-600" />
                        </div>
                        <div>
                          <p className="font-semibold text-gray-800">{t('adherence')}</p>
                          <p className="text-sm text-purple-600 font-medium">
                            {Math.round((takenDoses.length / (takenDoses.length + missedDoses.length + 1)) * 100)}%
                          </p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>

                {/* Today's Medications */}
                <Card className="bg-white border border-gray-200 shadow-lg">
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <CardTitle className="flex items-center gap-3 text-xl text-gray-800">
                        <Calendar className="h-6 w-6 text-blue-600" />
                        {t('todaysMedications')}
                      </CardTitle>
                      <Button 
                        onClick={() => setShowMedicationForm(true)}
                        className="bg-blue-500 hover:bg-blue-600 text-white"
                      >
                        <Plus className="h-4 w-4 mr-2" />
                        {t('addMedication')}
                      </Button>
                    </div>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    {Object.entries(dashboardData.doses).filter(([_, dose]) => {
                      const today = new Date().toDateString();
                      const doseDate = new Date(dose.time).toDateString();
                      return today === doseDate;
                    }).length > 0 ? (
                      Object.entries(dashboardData.doses).filter(([_, dose]) => {
                        const today = new Date().toDateString();
                        const doseDate = new Date(dose.time).toDateString();
                        return today === doseDate;
                      }).map(([doseId, dose]) => (
                        <div key={doseId} className="bg-gray-50 p-4 rounded-xl border border-gray-200 hover:bg-gray-100 transition-all group">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-4">
                              <div className="flex items-center justify-center w-12 h-12 rounded-full bg-gradient-to-r from-blue-400 to-cyan-500 text-white font-bold text-lg">
                                {dose.name.charAt(0).toUpperCase()}
                              </div>
                              <div>
                                <p className="font-semibold text-gray-800 text-lg">{dose.name}</p>
                                <p className="text-sm text-gray-600">
                                  {t('chamber')} {dose.chamber} • {new Date(dose.time).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                                </p>
                                {dose.conditions && (
                                  <p className="text-xs text-purple-600 mt-1 bg-purple-100 px-2 py-1 rounded-full inline-block">
                                    {dose.conditions}
                                  </p>
                                )}
                              </div>
                            </div>
                            <div className="flex items-center gap-3">
                              <Badge 
                                className={`${
                                  dose.status === 'taken' ? 'bg-green-100 text-green-800 border-green-200' :
                                  dose.status === 'missed' ? 'bg-red-100 text-red-800 border-red-200' :
                                  'bg-blue-100 text-blue-800 border-blue-200'
                                } px-3 py-1`}
                              >
                                {dose.status === 'taken' ? (
                                  <>
                                    <CheckCircle className="w-3 h-3 mr-1" />
                                    {t('taken')}
                                  </>
                                ) : dose.status === 'missed' ? (
                                  <>
                                    <AlertTriangle className="w-3 h-3 mr-1" />
                                    {t('missed')}
                                  </>
                                ) : (
                                  <>
                                    <Clock className="w-3 h-3 mr-1" />
                                    {t('upcoming')}
                                  </>
                                )}
                              </Badge>
                              
                              {/* Action Buttons */}
                              <div className="flex items-center gap-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                                <Button
                                  size="sm"
                                  variant="outline"
                                  className="bg-white border-gray-300 text-gray-700 hover:bg-gray-50 h-8 w-8 p-0"
                                  title={t('editMedication')}
                                  onClick={() => handleEditMedication(doseId)}
                                >
                                  <Settings className="h-3 w-3" />
                                </Button>
                                <Button
                                  size="sm"
                                  variant="outline"
                                  className="bg-red-50 border-red-200 text-red-600 hover:bg-red-100 h-8 w-8 p-0"
                                  title={t('deleteMedication')}
                                  onClick={() => handleDeleteMedication(doseId)}
                                >
                                  <XCircle className="h-3 w-3" />
                                </Button>
                              </div>
                            </div>
                          </div>
                        </div>
                      ))
                    ) : (
                      <div className="text-center py-12">
                        <div className="bg-gray-100 p-6 rounded-full w-24 h-24 mx-auto mb-4 flex items-center justify-center">
                          <Calendar className="h-12 w-12 text-gray-400" />
                        </div>
                        <p className="text-gray-600 mb-6 text-lg">{t('noMedicationsToday')}</p>
                        <Button 
                          onClick={() => setShowMedicationForm(true)}
                          className="bg-blue-500 hover:bg-blue-600 text-white"
                        >
                          <Plus className="h-4 w-4 mr-2" />
                          {t('scheduleTodayMedications')}
                        </Button>
                      </div>
                    )}
                  </CardContent>
                </Card>
              </div>
            )}

            {/* AI Assistant Tab */}
            {activeTab === 'ai-assistant' && (
              <div className="space-y-6">
                <Card className="bg-gradient-to-r from-blue-500 to-cyan-500 text-white">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-3 text-2xl">
                      <Brain className="h-8 w-8" />
                      {t('aiHealthAssistant')}
                      <Badge className="bg-white/20 text-white ml-auto">
                        {t('active')}
                      </Badge>
                    </CardTitle>
                    <p className="text-blue-100">{t('aiDescription')}</p>
                  </CardHeader>
                </Card>

                {/* AI Chat Interface */}
                <Card className="bg-white">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-3">
                      <MessageCircle className="h-6 w-6 text-blue-600" />
                      {t('aiChatTitle')}
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    {/* Chat Messages */}
                    <div className="h-96 overflow-y-auto bg-gray-50 rounded-lg p-4 space-y-4">
                      {aiChatMessages.length === 0 ? (
                        <div className="text-center text-gray-500 py-8">
                          <Brain className="h-12 w-12 mx-auto mb-4 text-gray-300" />
                          <p>{currentLanguage === 'hi' ? 'AI असिस्टेंट से बात करना शुरू करें' : 'Start chatting with your AI assistant'}</p>
                        </div>
                      ) : (
                        aiChatMessages.map((message, index) => (
                          <div key={index} className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}>
                            <div className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                              message.role === 'user' 
                                ? 'bg-blue-500 text-white' 
                                : 'bg-white border border-gray-200 text-gray-800'
                            }`}>
                              {message.message}
                            </div>
                          </div>
                        ))
                      )}
                      {aiChatLoading && (
                        <div className="flex justify-start">
                          <div className="bg-white border border-gray-200 px-4 py-2 rounded-lg">
                            <div className="flex items-center gap-2">
                              <div className="animate-spin rounded-full h-4 w-4 border-2 border-blue-500 border-t-transparent"></div>
                              <span className="text-gray-600">{t('aiTyping')}</span>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>

                    {/* Chat Input */}
                    <div className="flex gap-2">
                      <Input
                        value={aiChatInput}
                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => setAiChatInput(e.target.value)}
                        placeholder={t('aiChatPlaceholder')}
                        className="flex-1 bg-white border-blue-200 focus:border-blue-400 text-blue-900"
                        onKeyPress={(e: React.KeyboardEvent) => {
                          if (e.key === 'Enter') {
                            handleAiChat()
                          }
                        }}
                      />
                      
                      {/* Voice Control Button */}
                      {isSupported && (
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => setVoiceEnabled(!voiceEnabled)}
                          className={`border-blue-200 ${voiceEnabled ? 'text-blue-600 bg-blue-50' : 'text-gray-400'}`}
                          title={voiceEnabled ? t('disableVoice') || 'Disable Voice' : t('enableVoice') || 'Enable Voice'}
                        >
                          {voiceEnabled ? <Volume2 className="h-4 w-4" /> : <VolumeX className="h-4 w-4" />}
                        </Button>
                      )}
                      
                      {/* Stop Speaking Button */}
                      {isSpeaking && (
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={stop}
                          className="border-red-200 text-red-600 bg-red-50"
                          title="Stop Speaking"
                        >
                          <Pause className="h-4 w-4" />
                        </Button>
                      )}
                      <Button 
                        onClick={handleAiChat}
                        disabled={!aiChatInput.trim() || aiChatLoading}
                        className="bg-blue-500 hover:bg-blue-600 text-white"
                      >
                        <Send className="h-4 w-4" />
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              </div>
            )}

            {/* Medications Tab */}
            {activeTab === 'medications' && (
              <Card className="bg-white">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle className="flex items-center gap-3 text-xl text-gray-800">
                      <Pill className="h-6 w-6 text-blue-600" />
                      {t('allMedications')}
                      <Badge className="bg-gray-100 text-gray-700">
                        {Object.entries(dashboardData.doses).length} {t('total')}
                      </Badge>
                    </CardTitle>
                    <Button 
                      onClick={() => setShowMedicationForm(true)}
                      className="bg-blue-500 hover:bg-blue-600 text-white"
                    >
                      <Plus className="h-4 w-4 mr-2" />
                      {t('addNew')}
                    </Button>
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  {Object.entries(dashboardData.doses).length > 0 ? (
                    Object.entries(dashboardData.doses).map(([doseId, dose]) => (
                      <div key={doseId} className="bg-gray-50 p-4 rounded-xl border border-gray-200 hover:bg-gray-100 transition-all group">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-4">
                            <div className="flex items-center justify-center w-12 h-12 rounded-full bg-gradient-to-r from-blue-400 to-cyan-500 text-white font-bold text-lg">
                              {dose.name.charAt(0).toUpperCase()}
                            </div>
                            <div>
                              <p className="font-semibold text-gray-800 text-lg">{dose.name}</p>
                              <p className="text-sm text-gray-600">
                                {t('chamber')} {dose.chamber} • {new Date(dose.time).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                              </p>
                              {dose.conditions && (
                                <p className="text-xs text-purple-600 mt-1 bg-purple-100 px-2 py-1 rounded-full inline-block">
                                  {dose.conditions}
                                </p>
                              )}
                            </div>
                          </div>
                          <div className="flex items-center gap-3">
                            <Badge 
                              className={`${
                                dose.status === 'taken' ? 'bg-green-100 text-green-800 border-green-200' :
                                dose.status === 'missed' ? 'bg-red-100 text-red-800 border-red-200' :
                                'bg-blue-100 text-blue-800 border-blue-200'
                              } px-3 py-1`}
                            >
                              {dose.status === 'taken' ? (
                                <>
                                  <CheckCircle className="w-3 h-3 mr-1" />
                                  {t('taken')}
                                </>
                              ) : dose.status === 'missed' ? (
                                <>
                                  <AlertTriangle className="w-3 h-3 mr-1" />
                                  {t('missed')}
                                </>
                              ) : (
                                <>
                                  <Clock className="w-3 h-3 mr-1" />
                                  {t('upcoming')}
                                </>
                              )}
                            </Badge>
                            
                            {/* Action Buttons */}
                            <div className="flex items-center gap-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                              <Button
                                size="sm"
                                variant="outline"
                                className="bg-white border-gray-300 text-gray-700 hover:bg-gray-50 h-8 w-8 p-0"
                                title={t('editMedication')}
                                onClick={() => handleEditMedication(doseId)}
                              >
                                <Settings className="h-3 w-3" />
                              </Button>
                              <Button
                                size="sm"
                                variant="outline"
                                className="bg-red-50 border-red-200 text-red-600 hover:bg-red-100 h-8 w-8 p-0"
                                title={t('deleteMedication')}
                                onClick={() => handleDeleteMedication(doseId)}
                              >
                                <XCircle className="h-3 w-3" />
                              </Button>
                            </div>
                          </div>
                        </div>
                      </div>
                    ))
                  ) : (
                    <div className="text-center py-12">
                      <div className="bg-gray-100 p-6 rounded-full w-24 h-24 mx-auto mb-4 flex items-center justify-center">
                        <Pill className="h-12 w-12 text-gray-400" />
                      </div>
                      <p className="text-gray-600 mb-6 text-lg">{t('noMedicationsFound')}</p>
                      <Button 
                        onClick={() => setShowMedicationForm(true)}
                        className="bg-blue-500 hover:bg-blue-600 text-white"
                      >
                        <Plus className="h-4 w-4 mr-2" />
                        {t('addFirstMedication')}
                      </Button>
                    </div>
                  )}
                </CardContent>
              </Card>
            )}

            {/* Reports Tab */}
            {activeTab === 'reports' && (
              <div className="space-y-6">
                <Card className="bg-white">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-3 text-xl text-gray-800">
                      <BarChart3 className="h-6 w-6 text-blue-600" />
                      {t('medicineReport')}
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                      <div className="bg-green-50 p-6 rounded-xl border border-green-200 text-center">
                        <p className="text-3xl font-bold text-green-600">78%</p>
                        <p className="text-sm text-green-700">{t('adherenceRate')}</p>
                      </div>
                      <div className="bg-blue-50 p-6 rounded-xl border border-blue-200 text-center">
                        <p className="text-3xl font-bold text-blue-600">92%</p>
                        <p className="text-sm text-blue-700">{t('onTimeRate')}</p>
                      </div>
                      <div className="bg-purple-50 p-6 rounded-xl border border-purple-200 text-center">
                        <p className="text-3xl font-bold text-purple-600">{takenDoses.length}</p>
                        <p className="text-sm text-purple-700">{t('taken')}</p>
                      </div>
                      <div className="bg-orange-50 p-6 rounded-xl border border-orange-200 text-center">
                        <p className="text-3xl font-bold text-orange-600">{missedDoses.length}</p>
                        <p className="text-sm text-orange-700">{t('missed')}</p>
                      </div>
                    </div>
                    
                    <div className="space-y-4">
                      <h3 className="text-lg font-semibold text-gray-800">{t('thisWeek')}</h3>
                      <div className="space-y-3">
                        <div className="flex items-center justify-between">
                          <span className="text-gray-700">{t('adherenceRate')}</span>
                          <span className="text-green-600 font-medium">+5% {t('improvement')}</span>
                        </div>
                        <div className="flex items-center justify-between">
                          <span className="text-gray-700">{t('missedDosesReport')}</span>
                          <span className="text-orange-600 font-medium">3 {t('thisMonth')}</span>
                        </div>
                        <div className="flex items-center justify-between">
                          <span className="text-gray-700">{t('nextRefill')}</span>
                          <span className="text-blue-600 font-medium">{t('inDays')}</span>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            )}

            {/* Other tabs can be implemented similarly */}
            {!['dashboard', 'ai-assistant', 'medications', 'reports'].includes(activeTab) && (
              <Card className="bg-white">
                <CardContent className="p-12 text-center">
                  <div className="text-gray-400 mb-4">
                    <Settings className="h-16 w-16 mx-auto" />
                  </div>
                  <h3 className="text-xl font-semibold text-gray-600 mb-2">
                    {activeTab.charAt(0).toUpperCase() + activeTab.slice(1)} Section
                  </h3>
                  <p className="text-gray-500">
                    This section is coming soon. Stay tuned for updates!
                  </p>
                </CardContent>
              </Card>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}
